name: Java CI with Gradle & Docker

# push와 PR이 발생했을 경우 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 자바 버전 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      # 2. 브랜치 전환
      - name: Checkout
        uses: actions/checkout@v3

      # 3. Spring Boot 어플리케이션 Build
      - name: Spring Boot Build
        run: ./gradlew clean build -x test --warning-mode=all --stacktrace

      # 4. Docker 이미지 Build
      - name: docker image build
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}} .

      # 5. DockerHub Login
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PWD }}

      # 6. Docker Hub push
      - name: docker Hub push
        run: docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}

  run-docker-image-on-ec2:
    needs: build
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 pull
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_REPO}}

      # 2. 기존의 컨테이너를 중지
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행
      - name: docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_REPO}}

      # 4. 미사용 이미지를 정리
      - name: delete old docker image
        run: sudo docker system prune -f