name: Java CI with Gradle & Docker

# push와 PR이 발생했을 경우 실행
on:
  push:
    branches: [ "main", "cicd" ]
  pull_request:
    branches: [ "main", "cicd" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 자바 버전 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. 브랜치 전환
      - name: Checkout
        uses: actions/checkout@v3

      # 3. Spring Boot 어플리케이션 Build
      - name: Spring Boot Build
        run: ./gradlew clean build -x test --warning-mode=all --stacktrace

      # 4. Docker 이미지 Build
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .

      # 5. DockerHub Login
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PWD }}

      # 6. DockerHub Push
      - name: Push Docker Image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

  deploy:
    needs: build
    runs-on: ubuntu-latest  # self-hosted 대신 GitHub 호스팅 러너를 사용 (필요 시 수정 가능)

    steps:
      # 1. DockerHub에서 최신 이미지 Pull
      - name: Pull Docker Image from DockerHub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      # 2. 기존 컨테이너 중지
      - name: Stop Running Containers
        run: |
          if [ "$(sudo docker ps -q)" ]; then
            sudo docker stop $(sudo docker ps -q)
          fi

      # 3. 최신 이미지를 사용해 컨테이너 실행
      - name: Run New Container
        run: |
          sudo docker run --name app-container --rm -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      # 4. 미사용 도커 이미지 정리
      - name: Clean Up Unused Docker Images
        run: sudo docker image prune -a -f
